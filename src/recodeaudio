#!/bin/bash
#
# recodeaudio -
#
# Convert audio files into high quality MP3, OGG Vorbis or Opus audio files
# (preserving tags).
#
# Copyright (c) 2018, Éric Thiébaut.
#

progname=$(basename "$0" .sh | sed -r 's/[^a-zA-Z0-9]+/_/g')

fields="format quality destdir subdir cover album title genre comment artist track year"
for name in $fields; do
    eval ${name}=\"\"
    eval ${name}_set=\"no\"
done

# Defaults.
verbose="no"
silent="no"
debug="no"
format="opus"
bitrate=128
quality=4
destdir=./$format
subdir="auto"

# Utilities.
case "$TERM" in
    xterm*) ansicolors="yes";;
    *)      ansicolors="no";;
esac
if test "$ansicolors" = "yes"; then
    ANSIBLUEBOLD="\e[1;34m"
    ANSIRED="\e[0;31m"
    ANSIGREEN="\e[0;32m"
    ANSIBLUE="\e[0;34m"
    ANSIBROWN="\e[0;33m"
    ANSICYAN="\e[0;36m"
    ANSIRESET="\e[0;39;49m"
else
    ANSIBLUEBOLD=""
    ANSIRED=""
    ANSIGREEN=""
    ANSIBLUE=""
    ANSIBROWN=""
    ANSICYAN=""
    ANSIRESET=""
fi
Echo() { /bin/echo -e "$*"; }
EchoBlueBold() { Echo "${ANSIBLUEBOLD}$*${ANSIRESET}"; }
EchoGreen() { Echo "${ANSIGREEN}$*${ANSIRESET}"; }
EchoBrown() { Echo "${ANSIBROWN}$*${ANSIRESET}"; }
EchoRed() { Echo "${ANSIRED}$*${ANSIRESET}"; }

Die() {
    Echo >&2 "${ANSIRED}$progname: $*${ANSIRESET}"
    exit 1
}

Warn() {
    Echo >&2 "${ANSIBROWN}(WARNING) $*${ANSIRESET}"
}

Info() {
    if test "$silent" = "no"; then
	Echo "${ANSIBLUE}(INFO) $*${ANSIRESET}"
    fi
}

Usage() {
    cat >&2 <<EOF
Usage: $progname [OPTIONS] [INPUT]...

Convert audio sound file(s) into high quality MP3, OGG Vorbis or Opus audio
file(s) preserving tags.  The options are:
  --format opus|ogg|mp3    output type [$format]
  --quality QUALITY        qualitoutput bitrate in kbit/s [$bitrate]
  --destdir DESTDIR        top destination directory [$destdir]
  --subdir auto|none       create subdirectory based on tags [$subdir]
  --album ALBUM            album title
  --title TITLE            title
  --genre GENRE            genre of music
  --comment COMMENT        some comments
  --artist ARTIST          title artist
  --year YEAR              title year
  --track TRACK            track number
  --cover IMAGE            cover image
  --silent                 suppress non critical messages
  --verbose                verbose mode
  -h, --help               display this help and exit
  --                       end of options

Quality setting roughly corresponds to that of the Vorbis Ogg encoder.  The
best quality is 10, the worse quality is -2.  Choosing QUALITY=4 (the
default) corresponds to requiring an average bitrate of 128 kbit/s for the
Opus encoder or to a quality level of 5.6 for the Lame encoder.

EOF
    exit 1
}

# Approximate formulae based on tables in http://wiki.hydrogenaud.io:
#
#     average_bitrate = 240 - 20*lame_quality
#     lame_quality = (240 - average_bitrate)/20
#     average_bitrate = 128*exp(0.2*(ogg_quality - 4))
#     ogg_quality = 4 + 5*log(average_bitrate/128)
#

# Round to nearest integer.  Set environment variable to make sure
# fractional number are correctly interpreted.
export LC_NUMERIC=C
Round() {
    printf "%.0f" "$1"
}

# `LameQuality $quality` yields quality level for the Lame encoder given
# the quality level of the OGG encoder.
LameQuality() {
    printf "%.3f" $(echo "quality = (240 - 128*e(($1 - 4)/5))/20; if (quality < 0) quality = 0; if (quality > 9.999) quality = 9.999; print quality"  | bc -l)
}

# `AverageBitrate $quality` yields bitrate (in kbit/s) for the Opus encoder
# given the quality level of the OGG encoder.
AverageBitrate() {
    Round $(echo "128*e(($1 - 4)/5)" | bc -l)
}

# `FetchTag $tag $meta` retrieves value of tag `$tag` in file `$meta`.
FetchTag() {
    sed -r -e "/^$1 *:/I!d;s/^[^:]*://;s/[ 	]+/ /g;s/^ //;s/ $//" "$2"
}

StripSpaces() {
    echo "$*" | sed -e 's/[ 	][ 	]*/ /g;s/^ //;s/ $//'
}

# Extract meta data using `exiftool` in a unified form.
ExtractTags() {
    local pattern
    case "$1" in
	exiftool)
	    exiftool -s "$2" 2>"/dev/null"
	    ;;

	metaflac)
	    metaflac --no-filename --no-utf8-convert --export-tags-to="-" \
		     -- "$2" 2>"/dev/null" \
		| sed -r \
		      -e "s/[ 	]+/ /g;s/ $//" \
		      -e "s/^TITLE= */Title : /" \
		      -e "s/^ARTIST= */Artist : /" \
		      -e "s/^ALBUMARTIST= */AlbumArtist : /" \
		      -e "s/^ALBUM= */Album : /" \
		      -e "s/^DATE= *([12][0-9][0-9][0-9])$/Year : \1/" \
		      -e "s/^DATE= */Date : /" \
		      -e "s/^TRACKNUMBER= */Track : /" \
		      -e "s/^GENRE= */Genre : /" \
		      -e "s/^DESCRIPTION= */Comment : /" \
		      -e "/^[A-Z][A-Za-z]* : /!d"
	    ;;

	ogginfo)
	    ogginfo -- "$2" 2>"/dev/null" \
		| sed -r \
		      -e "/^	[A-Z]+=/I!d;s/[ 	]+/ /g;s/ $//" \
		      -e "s/^ TITLE= */Title : /I" \
		      -e "s/^ ARTIST= */Artist : /I" \
		      -e "s/^ ALBUMARTIST= */AlbumArtist : /I" \
		      -e "s/^ ALBUM= */Album : /I" \
		      -e "s/^ DATE= *([12][0-9][0-9][0-9])$/Year : \1/I" \
		      -e "s/^ DATE= */Date : /I" \
		      -e "s/^ TRACKNUMBER= */Track : /I" \
		      -e "s/^ GENRE= */Genre : /I" \
		      -e "s/^ DESCRIPTION= */Comment : /I" \
		      -e "/^ /d"
	    ;;

	opusinfo)
	    opusinfo -- "$2" 2>"/dev/null" \
		| sed -r \
		      -e "/^	[A-Za-z]*=/!d;s/[ 	]+/ /g;s/ $//" \
		      -e "s/^ title= */Title : /" \
		      -e "s/^ artist= */Artist : /" \
		      -e "s/^ ALBUMARTIST= */AlbumArtist : /" \
		      -e "s/^ album= */Album : /" \
		      -e "s/^ date= *([12][0-9][0-9][0-9])$/Year : \1/I" \
		      -e "s/^ date= */Date : /" \
		      -e "s/^ TRACKNUMBER= */Track : /" \
		      -e "s/^ (genre|GENRE)= */Genre : /" \
		      -e "s/^ DESCRIPTION= */Comment : /" \
		      -e "/^ /d"
	    ;;

	mp3info)
	    pattern="Artist : %a\nAlbum : %l\nTrack : %n\nTitle : %t\n"
	    pattern="${pattern}Year : %y\nGenre : %g\nComment : %c\nBitrate : %r\n"
	    mp3info -p "$pattern" "$2" 2>"/dev/null"
	    ;;

	id3info)
	    id3info "$2" 2>"/dev/null" \
		| sed -r \
		      -e "/^=== [A-Z][A-Z][A-Z]/!d;s/[	 ]+/ /g;s/ $//" \
		      -e "s/^=== TIT2[^:]*: */Title : /" \
		      -e "s/^=== TPE1[^:]*: */Artist : /" \
		      -e "s/^=== TALB[^:]*: */Album : /" \
		      -e "s/^=== TYER[^:]*: *([12][0-9][0-9][0-9])$/Year : \1/I" \
		      -e "s/^=== TYER[^:]*: */Date : /" \
		      -e "s/^=== TRCK[^:]*: */Track : /" \
		      -e "s/^=== TCON[^:]*: */Genre : /" \
		      -e "s/^=== COMM[^:]*: */Comment : /" \
		      -e "/^=== /d"
	    ;;
	*)
	    Die "Unknown tool \"$1\""
	    ;;
    esac
}

#------------------------------------------------------------------------------

GENRE[0]="Blues";              GENRE[50]="Darkwave";	      GENRE[100]="Humour"
GENRE[1]="Classic Rock";       GENRE[51]="Techno-Industrial"; GENRE[101]="Speech"
GENRE[2]="Country";	       GENRE[52]="Electronic";	      GENRE[102]="Chanson"
GENRE[3]="Dance";	       GENRE[53]="Pop-Folk";	      GENRE[103]="Opera"
GENRE[4]="Disco";	       GENRE[54]="Eurodance";	      GENRE[104]="Chamber Music"
GENRE[5]="Funk";	       GENRE[55]="Dream";	      GENRE[105]="Sonata"
GENRE[6]="Grunge";	       GENRE[56]="Southern Rock";     GENRE[106]="Symphony"
GENRE[7]="Hip-Hop";	       GENRE[57]="Comedy";	      GENRE[107]="Booty Bass"
GENRE[8]="Jazz";	       GENRE[58]="Cult";	      GENRE[108]="Primus"
GENRE[9]="Metal";	       GENRE[59]="Gangsta Rap";	      GENRE[109]="Porn Groove"
GENRE[10]="New Age";	       GENRE[60]="Top 40";	      GENRE[110]="Satire"
GENRE[11]="Oldies";	       GENRE[61]="Christian Rap";     GENRE[111]="Slow Jam"
GENRE[12]="Other";	       GENRE[62]="Pop/Funk";	      GENRE[112]="Club"
GENRE[13]="Pop";	       GENRE[63]="Jungle";	      GENRE[113]="Tango"
GENRE[14]="R&B";	       GENRE[64]="Native American";   GENRE[114]="Samba"
GENRE[15]="Rap";	       GENRE[65]="Cabaret";	      GENRE[115]="Folklore"
GENRE[16]="Reggae";	       GENRE[66]="New Wave";	      GENRE[116]="Ballad"
GENRE[17]="Rock";	       GENRE[67]="Psychedelic";	      GENRE[117]="Power Ballad"
GENRE[18]="Techno";	       GENRE[68]="Rave";	      GENRE[118]="Rhythmic Soul"
GENRE[19]="Industrial";	       GENRE[69]="Showtunes";	      GENRE[119]="Freestyle"
GENRE[20]="Alternative";       GENRE[70]="Trailer";	      GENRE[120]="Duet"
GENRE[21]="Ska";	       GENRE[71]="Lo-Fi";	      GENRE[121]="Punk Rock"
GENRE[22]="Death Metal";       GENRE[72]="Tribal";	      GENRE[122]="Drum Solo"
GENRE[23]="Pranks";	       GENRE[73]="Acid Punk";	      GENRE[123]="A Cappella"
GENRE[24]="Soundtrack";	       GENRE[74]="Acid Jazz";	      GENRE[124]="Euro-House"
GENRE[25]="Euro-Techno";       GENRE[75]="Polka";	      GENRE[125]="Dance Hall"
GENRE[26]="Ambient";	       GENRE[76]="Retro";	      GENRE[126]="Goa"
GENRE[27]="Trip-Hop";	       GENRE[77]="Musical";	      GENRE[127]="Drum & Bass"
GENRE[28]="Vocal";	       GENRE[78]="Rock & Roll";	      GENRE[128]="Club-House"
GENRE[29]="Jazz+Funk";	       GENRE[79]="Hard Rock";	      GENRE[129]="Hardcore"
GENRE[30]="Fusion";	       GENRE[80]="Folk";	      GENRE[130]="Terror"
GENRE[31]="Trance";	       GENRE[81]="Folk/Rock";	      GENRE[131]="Indie"
GENRE[32]="Classical";	       GENRE[82]="National Folk";     GENRE[132]="BritPop"
GENRE[33]="Instrumental";      GENRE[83]="Swing";	      GENRE[133]="Negerpunk"
GENRE[34]="Acid";	       GENRE[84]="Fast-Fusion";	      GENRE[134]="Polsk Punk"
GENRE[35]="House";	       GENRE[85]="Bebob";	      GENRE[135]="Beat"
GENRE[36]="Game";	       GENRE[86]="Latin";	      GENRE[136]="Christian Gangsta Rap"
GENRE[37]="Sound Clip";	       GENRE[87]="Revival";	      GENRE[137]="Heavy Metal"
GENRE[38]="Gospel";	       GENRE[88]="Celtic";	      GENRE[138]="Black Metal"
GENRE[39]="Noise";	       GENRE[89]="Bluegrass";	      GENRE[139]="Crossover"
GENRE[40]="Alt. Rock";	       GENRE[90]="Avantgarde";	      GENRE[140]="Contemporary Christian"
GENRE[41]="Bass";	       GENRE[91]="Gothic Rock";	      GENRE[141]="Christian Rock"
GENRE[42]="Soul";	       GENRE[92]="Progressive Rock";  GENRE[142]="Merengue"
GENRE[43]="Punk";	       GENRE[93]="Psychedelic Rock";  GENRE[143]="Salsa"
GENRE[44]="Space";	       GENRE[94]="Symphonic Rock";    GENRE[144]="Thrash Metal"
GENRE[45]="Meditative";	       GENRE[95]="Slow Rock";	      GENRE[145]="Anime"
GENRE[46]="Instrumental Pop";  GENRE[96]="Big Band";	      GENRE[146]="JPop"
GENRE[47]="Instrumental Rock"; GENRE[97]="Chorus";	      GENRE[147]="Synthpop"
GENRE[48]="Ethnic";	       GENRE[98]="Easy Listening";
GENRE[49]="Gothic";	       GENRE[99]="Acoustic";

#------------------------------------------------------------------------------

TrackNumber() {
    local str
    str=$(printf "%02d" "$1" 2>/dev/null) || str="$1"
    echo "$str"
}

while test $# -gt 0; do
    case "$1" in
	--format | --quality | --destdir | --subdir | --album | --title \
	    | --artist | --genre | --comment | --cover | --track | --year)
	    test $# -ge 2 || Die "missing argument for option $1"
	    name=$(echo "$1" | sed 's/^--//')
	    eval value=\$${name}_set
	    test "$value" = "no" || Die "option $1 already set"
	    value=$2
	    eval ${name}=\$value
	    eval ${name}_set=yes
	    if test "$name" = "format" -a "$destdir_set" = "no"; then
		destdir=./$format
	    fi
	    shift
	    ;;
	--silent)
	    silent="yes"
	    ;;
	--verbose)
	    verbose="yes"
	    ;;
	--debug)
	    debug="yes"
	    ;;
	--help|-h)
	    Usage
	    ;;
	--)
	    shift
	    break
	    ;;
	--* | -* )
	    Die "unknown option \"$1\" (try --help)"
	    ;;
	*)
	    break
	    ;;
    esac
    shift
done
if test "$silent" = "yes"; then
    verbose="no"
fi

# Compute quality/bitrate for the various encoder.
bitrate=$(AverageBitrate $quality)
lamequality=$(LameQuality $quality)
Info "Ogg quality: $quality"
Info "Lame quality: $lamequality"
Info "Average bitrate: $bitrate kbit/s"

if test "$cover_set" = "yes" -a ! -r "$cover"; then
    Die "cover image \"$cover\" unreadable"
fi

tempdir=/tmp/$progname-$$
meta="$tempdir/meta.txt"
if test "$debug" = "yes"; then
    Info "Temporary directory: $tempdir"
else
    trap "rm -rf $tempdir" 0
fi
mkdir -p "$tempdir"

for src in "$@"; do
    # Reset variables.
    srcdir=$(dirname "$src")
    base=""
    temp=""
    decode=""
    if test "$cover_set" = "no"; then
	cover=""
    fi

    # Prepare command to decode file and read tags.
    rm -f "$meta"
    case "$src" in
	*.flac)
	    # Input is FLAC audio file.
	    base=$(basename "$src" .flac)
	    temp="$tempdir/$base.wav"
	    decode="flac -d"
	    test "$verbose" = "yes" || decode="$decode --silent"
	    decode="$decode -o \"\$temp\" \"\$src\""

	    # Parse meta data.
	    ExtractTags metaflac "$src" >"$meta"
	    if test "$cover_set" = "no"; then
		cover="$tempdir/cover.jpg"
		metaflac --export-picture-to="$cover" "$src"
		test -r "$cover" || cover=""
	    fi
	    ;;

	*.opus)
	    # Input is Opus audio file.
	    base=$(basename "$src" .opus)
	    temp="$tempdir/$base.wav"
	    decode="opusdec --force-wav"
	    test "$verbose" = "yes" || decode="$decode --quiet"
	    decode="$decode \"\$src\" \"\$temp\""
	    ExtractTags opusinfo "$src" >"$meta"
	    ;;

	*.ogg)
	    # Input is OGG Vorbis audio file.
	    base=$(basename "$src" .ogg)
	    temp="$tempdir/$base.wav"
	    decode="oggdec"
	    test "$verbose" = "yes" || decode="$decode --quiet"
	    decode="$decode -o \"\$temp\" \"\$src\""
	    ExtractTags ogginfo "$src" >"$meta"
	    ;;

	*.mp3)
	    # Input is MP3 audio file.
	    base=$(basename "$src" .mp3)
	    temp="$tempdir/$base.wav"
	    decode="lame --decode \"\$src\" \"\$temp\""
	    test "$verbose" = "yes" || decode="$decode --silent"
	    #decode="sox -q --multi-threaded --norm"
	    #decode="$decode --type mp3 \"\$src\" --type wav \"\$temp\""

	    # Parse meta data (id3info is to be preffered to mp3info).
	    ExtractTags id3info "$src" >"$meta"
	    ;;

	*)
	    Warn >&2 "Skipping \"$src\" (unknown extension)"
	    continue
	    ;;
    esac

    # Fetch/guess tags.
    test -e "$meta" || touch "$meta"
    canonname=$(readlink --canonicalize "$src")
    canondir=$(dirname "$canonname")
    canondir=$(basename "$canondir")
    canonbase=$(basename "$canonname" | sed -e 's/\.[^.]*$//')
    if test $title_set = "no"; then
	title=$(FetchTag "Title" "$meta")
    fi
    if test $artist_set = "no"; then
	artist=$(FetchTag "Artist" "$meta")
	if test -z "$artist"; then
	    artist=$(FetchTag "AlbumArtist" "$meta")
	fi
    fi
    if test $album_set = "no"; then
	album=$(FetchTag "Album" "$meta")
    fi
    if test $year_set = "no"; then
	year=$(FetchTag "Year" "$meta")
	if test -z "$year"; then
	    year=$(FetchTag "Date" "$meta")
	fi
	if test -z "$year"; then
	    year=$(FetchTag "RecordingTime" "$meta")
	fi
    fi
    if test $comment_set = "no"; then
	comment=$(FetchTag "Description" "$meta")
    fi
    if test $track_set = "no"; then
	track=$(FetchTag "Track" "$meta")
	if test -z "$track"; then
	    track=$(FetchTag "TrackNumber" "$meta")
	fi
    fi
    if test $genre_set = "no"; then
	genre=$(FetchTag "Genre" "$meta")
    fi

    # Fix genre tag.
    tg=$(StripSpaces "$genre")
    if echo "$tg" | grep -qs '^\(( *[0-9][0-9]* *)\|[0-9][0-9]*\)$'; then
	if tg=$(printf "%d" $(echo "$tg" | sed -e 's/[^0-9]//g') 2>/dev/null); then
	    tg=${GENRE[$tg]}
	    if ! test -z "$tg"; then
		genre=$tg
	    fi
	fi
    fi

    # Default cover image.
    if test "$cover_set" = "no" -a -z "$cover"; then
	cover="$srcdir/cover.jpg"
    fi

    # Setup destination directory and file name.
    dir=$destdir
    if test "$subdir" = "auto"; then
	if test -z "$artist"; then
	    dir="$dir/ARTIST"
	else
	    dir="$dir/$artist"
	fi
	if test -z "$year"; then
	    dir="$dir (YEAR)"
	else
	    dir="$dir ($year)"
	fi
	if test -z "$album"; then
	    dir="$dir ALBUM"
	else
	    dir="$dir $album"
	fi
    fi
    dest="$dir/$base.$format"

    # Build encoding command.
    if test "$format" = "mp3"; then

	# Initial encoding command.
	encode="lame --noreplaygain -q 2 -V $lamequality"
	test "$verbose" = "yes" || encode="$encode --silent"

	# Add tags.
	encode="$encode --add-id3v2 --id3v2-only"
	if test -r "$cover"; then
	    encode="$encode --ti \"\$cover\""
	fi
	if ! test -z "$title"; then
	    encode="$encode --tt \"\$title\""
	fi
	if ! test -z "$artist"; then
	    encode="$encode --ta \"\$artist\""
	fi
	if ! test -z "$album"; then
	    encode="$encode --tl \"\$album\""
	fi
	if ! test -z "$year"; then
	    encode="$encode --ty \"\$year\""
	fi
	if ! test -z "$comment"; then
	    encode="$encode --tc \"\$comment\""
	fi
	if ! test -z "$track"; then
	    encode="$encode --tn \"\$track\""
	fi
	if ! test -z "$genre"; then
	    encode="$encode --tg \"\$genre\""
	fi

	# Add source and destination files.
	encode="$encode \"\$temp\" \"\$dest\""

    elif test "$format" = "opus"; then

	# Initial encoding command.
	encode="opusenc --bitrate $bitrate --vbr --comp 10"
	test "$verbose" = "yes" || encode="$encode --quiet"

	# Add tags (see https://www.xiph.org/vorbis/doc/v-comment.html).
	if test -r "$cover"; then
	    encode="$encode --picture \"3||||\$cover\""
	fi
	if ! test -z "$title"; then
	    encode="$encode --title \"\$title\""
	fi
	if ! test -z "$artist"; then
	    encode="$encode --artist \"\$artist\""
	fi
	if ! test -z "$album"; then
	    encode="$encode --album \"\$album\""
	fi
	if ! test -z "$year"; then
	    encode="$encode --date \"\$year\""
	fi
	if ! test -z "$track"; then
	    encode="$encode --comment \"TRACKNUMBER=\$track\""
	fi
	if ! test -z "$comment"; then
	    encode="$encode --comment \"DESCRIPTION=\$comment\""
	fi
	if ! test -z "$genre"; then
	    #encode="$encode --genre \"\$genre\""
	    encode="$encode --comment \"GENRE=\$genre\""
	fi

	# Add source and destination files.
	encode="$encode \"\$temp\" \"\$dest\""

    elif test "$format" = "ogg"; then

	# Initial encoding command.
	encode="oggenc -q $quality"
	test "$verbose" = "yes" || encode="$encode --quiet"

	# Add tags (see https://www.xiph.org/vorbis/doc/v-comment.html).
	if ! test -z "$title"; then
	    encode="$encode --title \"\$title\""
	fi
	if ! test -z "$artist"; then
	    encode="$encode --artist \"\$artist\""
	fi
	if ! test -z "$album"; then
	    encode="$encode --album \"\$album\""
	fi
	if ! test -z "$year"; then
	    encode="$encode --date \"\$year\""
	fi
	if ! test -z "$track"; then
	    encode="$encode --tracknum \"\$track\""
	fi
	if ! test -z "$comment"; then
	    encode="$encode -c \"DESCRIPTION=\$comment\""
	fi
	if ! test -z "$genre"; then
	    #encode="$encode --genre \"\$genre\""
	    encode="$encode --genre \"\$genre\""
	fi

	# Add source and destination files.
	encode="$encode -o \"\$dest\" \"\$temp\""

    else
	Die "Unknown output format \"$format\""
    fi

    # Evaluate commands.
    if test "$silent" = "no"; then
	Echo "input:  ${ANSICYAN}$src${ANSIRESET}"
    fi
    if test "$verbose" = "yes"; then
	Info "Output directory: $dir"
	Info "Cover image: $cover"
    fi
    mkdir -p "$dir"
    rm -f "$temp"
    eval $decode
    eval $encode
    if test "$silent" = "no"; then
	Echo "output: ${ANSIGREEN}$dest${ANSIRESET}"
    fi
done
exit 0
